'use strict';

var _md = require('md5');

var _md2 = _interopRequireDefault(_md);

var _xml2js = require('xml2js');

var _uuid = require('uuid');

var _uuid2 = _interopRequireDefault(_uuid);

var _constants = require('./constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 参数签名并转成xml
 * @param params
 * @param key
 */
/**
 * Created by linyi on 16/8/8.
 */
function getSignXML(params, key) {
    params["sign"] = genSignature(params, key);
    var builder = new _xml2js.Builder({ rootName: "xml" });
    return builder.buildObject(params);
}

/**
 * 参数签名
 * @param params json参数
 * @param key 密钥
 * @returns {string}
 */
function genSignature(params, key) {
    var temp = "";
    Object.keys(params).sort().forEach(function (v, i) {
        if (v !== 'sign' && params[v]) {
            temp += v + "=" + params[v] + "&";
        }
    });
    var sign = (0, _md2.default)(temp + "key=" + key).toUpperCase();
    return sign;
}

function getSafeResult(xml, key) {
    var promise = new Promise(function (resolve, reject) {
        (0, _xml2js.parseString)(xml, { explicitArray: false }, function (error, result) {
            if (error) {
                reject(error);
            } else {
                var resultJson = result.xml;
                if (resultJson.return_code == _constants.SUCCESS) {
                    var sign = resultJson.sign;
                    if (sign !== genSignature(resultJson, key)) {
                        reject("sign error:bad response");
                    } else {
                        resolve(resultJson);
                    }
                } else {
                    resolve(resultJson);
                }
            }
        });
    });
    return promise;
}

function genNonceStr() {
    return _uuid2.default.v4().replace(/\-/g, "");
}

module.exports = {
    getSignXML: getSignXML,
    getSafeResult: getSafeResult,
    genSignature: genSignature,
    genNonceStr: genNonceStr
};